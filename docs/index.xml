<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dominik Rys</title>
    <link>https://dominikrys.com/</link>
    <description>Recent content on Dominik Rys</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-GB</language>
    <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
    <lastBuildDate>Mon, 21 Sep 2020 16:52:48 +0100</lastBuildDate><atom:link href="https://dominikrys.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Monitoring Corda Nodes Using Grafana, InfluxDB, and Telegraf</title>
      <link>https://dominikrys.com/posts/2020/09/monitoring-corda-nodes-using-grafana-influxdb-and-telegraf/</link>
      <pubDate>Mon, 21 Sep 2020 16:52:48 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/2020/09/monitoring-corda-nodes-using-grafana-influxdb-and-telegraf/</guid>
      <description>This post is also hosted on the Corda Blog. The main goal behind this post was to provide an easily accessible high-level overview on monitoring Corda nodes. It also showcases part of what I&amp;rsquo;ve done during my summer internship at R3.
 Intro Here at R3, we have a cluster of Corda nodes that we use for performance testing. We have developed a performance testing suite that enables us to establish baseline numbers, quantify improvements from new features, and identify regressions.</description>
    </item>
    
    <item>
      <title>Compiling a C&#43;&#43; CHIP-8 Emulator to WebAssembly</title>
      <link>https://dominikrys.com/posts/2020/08/compiling-a-c-chip-8-emulator-to-webassembly/</link>
      <pubDate>Sat, 15 Aug 2020 16:55:48 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/2020/08/compiling-a-c-chip-8-emulator-to-webassembly/</guid>
      <description>Intro A couple of months ago I wrote a CHIP-8 emulator in C++17 as I wanted to learn about emulation and expand my C++ knowledge outside of work. You can check out the source code or try it out online through the magic of WebAssembly.
In this post I&amp;rsquo;ll explain how I went about compiling the emulator which was designed to run natively on Windows, Linux and macOS, to also run on the web using WebAssembly.</description>
    </item>
    
    <item>
      <title>First Blog Post</title>
      <link>https://dominikrys.com/posts/2020/08/first-blog-post/</link>
      <pubDate>Sat, 01 Aug 2020 15:16:16 +0100</pubDate>
      
      <guid>https://dominikrys.com/posts/2020/08/first-blog-post/</guid>
      <description>Hi, I&amp;rsquo;m Dom. Welcome to my first blog post!
My main objective for this blog is to start documenting my work more. Having had completed some small side projects and interning at some companies, I wanted a place to document the details of my past work. I thought that a blog is the perfect place for this.
The tech stack I used to set up this blog is quite straightforward. Hugo is the static site generator responsible for most of the heavy work, allowing me to write posts simply in Markdown and then rapidly generate the web pages.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://dominikrys.com/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://dominikrys.com/about/</guid>
      <description>I&amp;rsquo;m a final year Computer Science student at the University of Birmingham.
Opinions expressed on this blog are solely my own and do not express the views or opinions of my employer.</description>
    </item>
    
  </channel>
</rss>
